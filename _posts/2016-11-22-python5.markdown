---
layout: post
title:	"python基础知识点OOP总结"
date:	2016-11-22 13:07:11 +0800
categories:	python
---

> 面向对象的思想虽然好理解，但是不同的语言的实现方式是有区别的，python的面向对象机制非常的灵活，也很优雅.....

## python的OOP的实质

	python的面向对象其实就是在已连接的命名空间对象上搜索属性

 这里再次出现了命名空间，命名空间在python中的重要性再怎么强调也不为过。python中的命名空间本来是孤立的，但是因为OOP而将不同的命名空间联系了起来，从而我们可以形成一个命名空间组成的 "树状结构"，python的OOP机制就是在这个树状结构上的搜索机制，这就是python的OOP的本质所在。

## python的类和继承

 因为学习过java。感觉python的oop机制的实现还是比较粗糙的。当然也是比较灵活的，有动态语言的特定。

	class A:
		pass

	class B(A):
		pass
	
	class C:
		pass

	class D(A,C):
		pass

  这里B继承了A；D继承了A和C。

	class A:
		def fun(self):
			self.action()

	class B(A):
		def action(self):
			pass

 * 这里A作为基类，定义了方法fun，隐含了子类需要实现action方法。

 * python的继承搜索会现在实例对象中寻找属性，然后才是创建实例的类，之后是所有超类，当首次找到时，搜索就会停止。

 * 类和实例对象都是命名空间，两者的主要区别是，类是建立实例的工厂，类也支持运算符重载方法，由实例继承。

 * 类总是位于模块中，类是模块对象的属性，类和模块都是命名空间。

 * 类是通过运行class语句创建的；实例是像函数那样调用类来创建的

 * 类属性的创建是通过把属性赋值给类对象实现的，类属性是由class语句中的顶层赋值语句产生的。

 * 实例属性是通过对实例对象赋值属性来创建的，实例属性一般是在class语句中的类方法函数中对self参数赋值属性而创建的。

 * self 通常是给类方法函数中的第一个参数的名称