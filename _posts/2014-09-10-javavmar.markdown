---
layout: post
title:  "java虚拟机学习笔记"
date:	2014-09-10 13:07:11 +0800
categories: java
---

* Table of Contents
{:toc}

> 对于一个java程序员来说，水平达到一定程度后，对java虚拟机进行深入的研究，是提升技术水平的必经之路，把学习java虚拟机过程中感觉有启发性和重要性的知识点记录下来，作为备忘录。

##java的含义

 java的起源 -->  跨平台 --> 字节码，虚拟机
 
 java : java语言规范，java虚拟机规范

##虚拟机的类加载

 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。

 类加载的过程

 ![](/image/java1.PNG)

 以上步骤中`加载、验证、准备、初始化和卸载`这5个阶段的顺序是确定的,类的加载过程必须按照这种顺序按部就班的开始，注意这里说的是开始而不是进行或完成，这是因为这些阶段通常都是互相交叉地混合式进行的，通常会在一个阶段的过程中调用，激活另外一个阶段。
 
 这里解析阶段在某些情况下可以在初始化之后再开始，这是为了支持java语言的运行时绑定

 什么时候开始类加载的第一阶段`加载`是由具体的虚拟机实现决定的，但是虚拟机规范严格要求

##class文件结构

 魔数 	

	0xCAFEBABE

 版本号

	0x00000033

 常量池计数值

	0x0016
 

## Java内存模型

 Java内存模型的目的就是定义程序中各个变量的访问规则，就是在java虚拟机中将变量存储到内存和从内存中将变量取出这样的细节。

	这里说的变量包括 实例变量，静态变量和构成数组对象的元素。
	不包括局部变量和方法参数

 Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的

##java多线程

 线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源（内存地址，文件I/O等），又可以独立调度（线程是CPU调度的基本单元）。     
 java中每个已经执行了start()方法且还未结束的java.lang.Thread类的实例就是一个线程，Thread类的大部分关键方式都是Native的，Native方法说明这个方法的实现没有使用或者无法实现平台无关的方法来实现（或者是为了追求效率不去实）。