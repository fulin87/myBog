---
layout: post
title:	"python基础知识点之数据结构"
date:	2016-11-18 13:07:11 +0800
categories:	python
---

* Table of Contents
{:toc}

> python中的数据结构大致可以分为三类：序列，映射，集合。这里详细的总结一下。

## 序列

 序列的成员有序排列的，并且可以通过下标偏移量访问到它的一个或者几个成员,有序是序列的灵魂。序列有一些通用的方法：连接，重复，切片。

 * 连接（+）

		sq1 = [12,3]
		sq2 = [5,6]
		sq1 + sq2

 * 重复（*）

		sq1 = [12,3]
		sq1 * 2

 * 切片（[], [:], [::]）
 
 	![](/image/python_list.PNG)
		
### 字符串

* 创建字符串

	python中创建字符串没有单引号和双引号之分。
	
		str1 = "fulin"
		str2 = 'fulin'
		str3 = str('fulin')

* 字符串的方法

	字符串的方法太多，这里不做过多的总结了。

### 列表

* 创建列表

		list1 = [1,2,3]
		list2 = [1,2,[2,3]]
		list3 = list()

* 列表的方法

		list.append(obj)		#向列表中添加一个对象obj
		list.count(obj)		#返回一个对象obj 在列表中出现的次数
		list.extend(seq)		#把序列seq 的内容添加到列表中
		list.remove(obj)		#从列表中删除对象obj
		list.reverse()		#原地翻转列表
		

### 元组

 元组这里没有什么好说的，但要记住一点：元组是不可变序列，在python中有三种数据类型是不可变的：数字，字符串，元组。    
 虽然元组不可变，但是元组的元素如果是引用类型，其值是可变的。

## 集合
 
* 创建集合

	这里的集合和数学中的集合概念差不多，就是容纳不同元素的容器，不过python中的集合分两类：`可变集合` 和 `不可变集合`

		s = set([1,2,3]) //set()方法产生一个可变集合
		s1= frozenset([1,2,4]) //frozenset()方法产生一个不可变集合

* 集合的运算

		set1 = set([1,2,3])	
			//创建集合
		set2 = set([1,2,4])	
			//创建集合
		set1 | set2 		
			//两集合的并集，输出：{1，2，3，4}
		set1 & set2 		
			//两集合的交集，输出：{1,2}
		set1 - set2		
			//两集合的差集相对差集，set1去掉set2中有的元素,输出:{3}
		set1 ^ set2 		
			//两集合的对称差集,set1有且set2无或set2有且set1无，输出：{3,4}
		set1 == set2 		
			//判断两集合的元素是否相同
		set1 != set2 		
			//判断两集合的元素是否是不相同
		set1 < set2 		
			//判断set1是否是set2的真子集
		set1 <= set2		
			//判断set1是否是set2的子集
		set1 > set2		
			//判断set2是否是set1的真子集
		set1 >=set2		
			//判断set2是否是set1的子集
		1 in set1		
			//判断1是否是set1的成员
		1 not in set1		
			//判断1是否不是set1的成员
	
* 集合的操作(方法)

	集合的方法应该分两类，一类是可变集合的，一类是不可变集合的，但是在使用的时候，根据方法的功能，应该是很好区分的，这里不做区分。
 
		set1.add(5)		
			//向set1中添加元素
		set1.update([1,2,3])	
			//向set1中一次添加多个元素
		set1.remove(1)		
			//删除set1中的元素1，如果set1中不存在1则引发异常

		s.issubset(t)		
			//如果s 是t 的子集，则返回True,否则返回False
		s.issuperset(t) 	
			//如果s 是t 的超集，则返回True,否则返回False
		s.union(t) 			
			//返回一个新集合，该集合是s 和t 的并集
		s.intersection(t)	
			//返回一个新集合，该集合是s 和t 的交集
		s.difference(t)		
			//返回一个新集合，该集合是s 的成员，但不是t 的成员
		s.symmetric_difference(t)	
			//返回一个新集合，该集合是s或t的成员，但不是s 和t 共有的成员
		s.copy()		
			//返回一个新集合，它是集合s 的浅复制
		s.pop() 		
			//移除并返回s 中的任意一个元素
		s.clear() 		
			//清除操作: 移除s 中的所有元素
 

> 集合的运算，如果运算符两边的集合类型一个是可变集合，一个是不可变集合，则运算的结果的类型以运算符左边的类型为准

## 字典

 * 创建字典

		dic1 = {}	//创建一个空字典
		dic2 = {'name':'fulin','age':27}    //创建一个有两个元素的字段
		dic3 = dict()		//用dict()内建函数创建一个空字典
		dic4 = dict((['x',1],['y',2])) 
		dic5 = {}.fromkeys(('x','y','z'),-1)

 * 操作字典
	 
		del dict2['name'] 		#删除键为“name”的条目
		dict2.clear()			#删除dict2 中所有的条目
		del dict2				#删除整个dict2 字典
		dict2.pop('name')		#删除并返回键为“name”的条目
		'fu' in dict2			#检查dict2中是否有键'fu'
		'fu' not in dict2		#检查dict2中是否没有键'fu'

		dict.copy() 			#返回字典(浅复制)的一个副本
		dict.get(key,
		default=None)			#对字典dict 中的键key,返回它对应的值value，如果字典中不存在此键，则返回default 的值(注意，参数default 的默认值为None)
		dict.items() 			#返回一个包含字典中(键, 值)对元组的列表
		dict.keys() 			#返回一个包含字典中键的列表
		dict.popc(key[, default]) #和方法get()相似，如果字典中key 键存在，删除并返回dict[key]，如果key 键不存在，且没有给出default 的值，引发KeyError 异常。
		dict.update(dict2)		#将字典dict2 的键-值对添加到字典dict
		dict.values() 			#返回一个包含字典中所有值的列表
		dict.setdefault(key,default=None) #和方法set()相似，如果字典中不存在key 键，由dict[key]=default 为它赋值。