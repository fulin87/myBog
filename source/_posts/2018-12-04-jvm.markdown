---
layout: post
title:  "老鸟眼中的java和JVM知识体系"
date:	2018-12-04 13:07:11 +0800
categories: java
---

> 写了多年的java代码，现在以一个老鸟的视角来看java，真的和刚开始的时候是有天壤之别的，依然记得当初跑出第一个 *Hello World* 时候的感觉：*运行一个程序竟然什么感觉都没有，一闪而过*。现在看来，当年的自己还是太稚嫩了，一个简单的 *Hello World* 其实已经包含了java技术体系中最核心，最重要的东西-----**JVM**

###jvm的运行模式

	client 模式 java -client启用
	server 模式 java -server启动

client模式启动的是Client VM的实现，可以减少启动时间和内存占用,一般用在java客户端上,比如java的GUI程序

server模式启动的是server VM的实现，启动时间会有点长，但是程序运行速度更快

不管是client还是server模式有些底层技术是通用的：

	自适应编译(JIT)
	快速内存分配和垃圾回收
	线程同步

### jvm调优的目标

	尽可能大的吞吐量,尽可能小的GC停顿时间（吞吐量是GC时间在总时间中的占比，比值越小，吞吐量越高）

### JVM的垃圾收集器

	串行收集器 >> 适合单处理器小数据集
	并行收集器 >> 吞吐量优先，多个线程执行GC，系统一定会出现短时Stop the World
	并发收集器 >> 响应时间优先，GC时系统不会出现Stop the World

* 选择垃圾收集器的原则

 * 如果应用的数据集小于100M，或者在单个处理器上运行，没有暂停时间要求，则使用串行收集器
 * 如果系统的吞吐量是第一优先级而且系统的暂停是可以接受的，使用并行收集器
 * 如果系统的响应时间比吞吐量更重要，并且垃圾收集暂停必须小于1s,则使用并发收集器

### 
	-XX:+UseSerialGC 使用串行收集器（串行）
	-XX:+UseParallelGC 使用并行收集器(并行）
	-XX:-UseParallelOldGC 关闭并行压缩（并行）
	-XX:+UseConcMarkSweepGC 启用CMS收集器(并发）
	-XX:+UseG1GC	启用G1收集器(并发）
	-XX:ParallelGCThreads=<N> 调整并行收集器的GC线程数量

### volatile为什么不能实现线程安全

[为什么volatile不能保证线程安全](https://blog.csdn.net/qq_33330687/article/details/80990729)

[jvm调优](https://blog.csdn.net/wuzhilon88/article/details/49201891)

### 平时遇到的异常

#### 堆溢出

		/**
		 * 
		 * @author fulin16
		 * 
		 * 模拟 Java heap space 溢出
		 * 运行参数：-verbose:gc -Xms10M -Xmx10M -Xss128k -XX:+PrintGCDetails
		 */
		class Person{}
		public class HeapException {
			public static void main(String[] args) {
				List<Person> list = new ArrayList<Person>();
				while(true){
					list.add(new Person());
				}
			}
		}

		//堆中存放的是实例化的对象，如果堆中的对象

> 异常堆栈

		[GC (Allocation Failure) [PSYoungGen: 2528K->496K(2560K)] 6226K->6244K(9728K), 0.0036614 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
		[Full GC (Ergonomics) [PSYoungGen: 496K->0K(2560K)] [ParOldGen: 5748K->5117K(7168K)] 6244K->5117K(9728K), [Metaspace: 2660K->2660K(1056768K)], 0.0733379 secs] [Times: user=0.16 sys=0.00, real=0.07 secs] 
		[GC (Allocation Failure) [PSYoungGen: 2048K->512K(2560K)] 7165K->7180K(9728K), 0.0027150 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
		[Full GC (Ergonomics) [PSYoungGen: 512K->0K(2560K)] [ParOldGen: 6668K->6227K(7168K)] 7180K->6227K(9728K), [Metaspace: 2660K->2660K(1056768K)], 0.0365703 secs] [Times: user=0.14 sys=0.00, real=0.04 secs] 
		[Full GC (Ergonomics) [PSYoungGen: 1391K->863K(2560K)] [ParOldGen: 6227K->6735K(7168K)] 7618K->7599K(9728K), [Metaspace: 2660K->2660K(1056768K)], 0.0618754 secs] [Times: user=0.11 sys=0.00, real=0.06 secs] 
		[Full GC (Allocation Failure) [PSYoungGen: 863K->863K(2560K)] [ParOldGen: 6735K->6724K(7168K)] 7599K->7588K(9728K), [Metaspace: 2660K->2660K(1056768K)], 0.0571520 secs] [Times: user=0.11 sys=0.00, real=0.06 secs] 
		Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
			at java.util.Arrays.copyOf(Arrays.java:3210)
			at java.util.Arrays.copyOf(Arrays.java:3181)
			at java.util.ArrayList.grow(ArrayList.java:261)
			at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
			at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
			at java.util.ArrayList.add(ArrayList.java:458)
			at com.fulin.exception.HeapException.main(HeapException.java:27)
		Heap
		 PSYoungGen      total 2560K, used 945K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
		  eden space 2048K, 46% used [0x00000000ffd00000,0x00000000ffdec6e0,0x00000000fff00000)
		  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)
		  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)
		 ParOldGen       total 7168K, used 6724K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)
		  object space 7168K, 93% used [0x00000000ff600000,0x00000000ffc91060,0x00000000ffd00000)
		 Metaspace       used 2692K, capacity 4486K, committed 4864K, reserved 1056768K
		  class space    used 289K, capacity 386K, committed 512K, reserved 1048576K

....... 未完待续