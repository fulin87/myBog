---
layout: post
title:  "老鸟眼中的JVM知识体系(1)-Java体系"
date:	2018-12-04 13:07:11 +0800
categories: java
---

> 写了多年的java代码之后，现在以一个老鸟的视角来看java，真的和刚开始的时候是有天壤之别的，依然记得当初跑出第一个 *Hello World* 时候的感觉：*运行一个程序竟然什么感觉都没有，竟然如此平凡*。现在看来，当年的自己还是太稚嫩了，一个简单的 *Hello World* 其实已经包含了java技术体系中最核心，最重要的东西-----**JVM**

### java到底是什么

> 现在大家说java，其实是包含了两部分 **java语言本身** 和 **JVM**,众所周知，java是跨平台的。
> 与其说java是跨平台的，不如说字节码是跨平台的。JVM本身不是跨平台的，不跨平台的JVM可以执行相同的字节码，从而间接的实现了字节码的跨平台运行。这里的字节码不一定是通过java语言编译获取，也可以通过其他语言间接得到，甚至直接编写。

![java跨平台](/content/image/jvmkuapingtai.PNG)

#### java技术体系

> 因此 JVM是java技术的基石。平时我们所说的java规范分为两部分

 * java语言规范
   * JDK的API
   * 第三方的类库（非必须，但是非常重要，比如spring）
 * JVM规范（字节码规范是属于JVM规范的一部分）



#### JAVASE,JAVAME,JAVAEE到底是什么

* JAVASE是 standard edite，主要是开发桌面应用,如Eclipse
* JAVAME，mobile edite,开发移动应用，代表性的有nokia S60
* JAVAEE，企业级应用，由13种技术组成

 

### java语言的发展历程

> 虽然网络上有大量的文章介绍java的发展历程，这里我还是想用自已的思路总结一下，方便自己复习和查阅

* 1995 年 Sun公司的*詹姆斯高斯林*领导的一个项目开发了一门语言 **oak** 
* 1996年 **oak** 正式更名为java，同时java1.0发布，正式喊出了一个著名的口号：*once write,run everywhere*
* 1996年9月**javaOne**大会举行
* 1997年jdk1.0发布，包括内部类，反射，JDBC, rmi等
* 1998年2月jdk1.2发布，首次提出三大方向：J2SE , J2EE, J2ME。而且JVM中内置JIT了，出现了HotSpot虚拟机
* 2000年jdk1.3发布，代表性的有Timer。而且2000年以后，java进入了一个高速发展的阶段
* 2004年jdk1.4发布，jdk1.4是一个里程碑式的版本，是一个java走向成熟的版本
  * jdk1.4中增加了很多的新特性，比如NIO，正则表达式，日志，xml解析器
  * 同时基于jdk1.4出现了大量优秀的框架，代表性的有 Struts,Hibenate,spring1.x
  * jdk1.4这个时候已经基本完善了
* 2004年9月份jdk1.5发布，在这个版本中对java语法进行了大量的改进
  * 自动装箱，拆箱
  * 增强for循环,JUC包优化了线程的使用
  * 枚举，泛型，注解
  * 基于jdk1.5出现了spring2.x

* 2006年jdk1.6发布，同时规范名字的命令：JAVASE,JAVAEE,JAVAME,jdk6
  * 提供脚本语言支持
  * 提供了编译API和微型的http服务器API
  * 同年Sun公司宣布将java开源
  * 同时Sun公司陷入财务和收购相关的问题，接下来没能保持2年一个版本的发布频率
* 2009年jdk7发布
  * lambad 表达式，模块化
  * 同年Oracle收购Sun公司，收购价74亿美金
  * 同年很多人对java的前景表示担忧
* 2014年jdk8发布
  * lambta表达式
  * 新的日期API
  * 流式处理
  * java在Oracle手中继续发扬光大，前途光明

### JVM到底是什么

 通俗的说JVM就是运行在主机上的一个程序，是一个java进程。JVM由三大部分组成

 * 类加载子系统
 * 运行时数据区
 * 执行引擎

> 平时我们所说的堆和栈都是属于运行时数据区。JVM的类加载子系统是非常强大和灵活的，JVM允许我们在程序运行的过程中加载类，这给我们提供了很大的灵活性，也为热部署提供了可能。

#### 有哪些著名的虚拟机

* Sun Classic VM

  * 世界上第一款商业的java虚拟机。现在已经完全被淘汰

  * 只有解释器，想编译执行只能使用JIT外挂
  * 因为是解释执行，所以运行效率低，这也是为什么java给人的感觉效率低，其实后来一点都不低

* Exact VM
  * 非常短暂的虚拟机，只在Solaris平台发布过
  * 已经具有了高性能虚拟机的雏形

* Hotspot VM

  * Longview Technologies公司开发
  * 因为Sun公司注意到其在JIT上的优秀理念，收购了Longview Technologies
  * Sun公司对java开源之后，其开始称霸java虚拟机领域

* jRockit VM

  * BEA开发，世界上最快的java虚拟机，不包含解析器，全部靠及时编译实现，所以速度非常快

  * BEA后来被Oracle收购，jRockit虚拟机后来在JDK8中有体现

* J9 VM

  * IBM开发，和Hotspot类似，全能性的著名虚拟机。是IBM的java应用执行平台。

* Dalvik VM

  * google出品。安卓系统使用。不是真正的java虚拟机，不能直接执行class文件。

* Microsoft VM。在java的诞生初期，微软和java非常友好

  * 微软想把java绑定到自己的产品中去。只能运行在windows平台下。
  * 后来Sun公司状告微软侵犯商品权，并以这个虚拟机为证据
  * 微软败诉，赔偿巨额赔款。从此微软就不在开发虚拟机，转而开始搞.NET平台

* Azul VM

  * 真正的高性能虚拟机，碾压HotSpot.可以管理数十个CPU和数百G的内存

* Liquid VM

  * 也是高性能的虚拟机，碾压HotSpot.本身就相当于是一个操作系统一样

* Taobao VM

  * 阿里巴巴基于Hotspot深度定制的一款java虚拟机
  * 对硬件依赖比较高，只支持Intel的CPU，牺牲了跨平台性，提高了性能
  * 据说本地方法调用开销非常小
  * 是中国人的骄傲

#### jvm的运行模式是什么

	client 模式 java -client启用
	server 模式 java -server启动

client模式启动的是Client VM的实现，可以减少启动时间和内存占用,一般用在java客户端上,比如java的GUI程序

server模式启动的是server VM的实现，启动时间会有点长，但是程序运行速度更快

不管是client还是server模式有些底层技术是通用的：

	自适应编译(JIT)
	快速内存分配和垃圾回收
	线程同步

#### jvm调优的目标

	尽可能大的吞吐量,尽可能小的GC停顿时间（吞吐量是GC时间在总时间中的占比，比值越小，吞吐量越高）

### JVM的垃圾收集器

	串行收集器 >> 适合单处理器小数据集
	并行收集器 >> 吞吐量优先，多个线程执行GC，系统一定会出现短时Stop the World
	并发收集器 >> 响应时间优先，GC时系统不会出现Stop the World

* 选择垃圾收集器的原则

 * 如果应用的数据集小于100M，或者在单个处理器上运行，没有暂停时间要求，则使用串行收集器

 * 如果系统的吞吐量是第一优先级而且系统的暂停是可以接受的，使用并行收集器

 * 如果系统的响应时间比吞吐量更重要，并且垃圾收集暂停必须小于1s,则使用并发收集器

   ```
   -XX:+UseSerialGC 使用串行收集器（串行）
   -XX:+UseParallelGC 使用并行收集器(并行）
   -XX:-UseParallelOldGC 关闭并行压缩（并行）
   -XX:+UseConcMarkSweepGC 启用CMS收集器(并发）
   -XX:+UseG1GC	启用G1收集器(并发）
   -XX:ParallelGCThreads=<N> 调整并行收集器的GC线程数量
   ```

### java字节码

  字节码的整体结构,按照顺序依次是
 	
 	* Magic Number 
	 	> 魔数，4个字节。值为0xCAFEBABE 由java语言的作者James Gosling定义的
	* Version
		
		> 版本号，4个字节,前两个字节是minor_version，后两个字节是major_version
	* Constant Pool
		
		> 常量池，2 + n 个字节
	* Access Flags
		
		> 访问标志符,2个字节
	* This Class Name
		
		> 当前类的名字,2个字节
	* Supper Class Name
		
		> 父类的名字,2个字节
	* Interfaces
		
		> 接口,2+n个字节。一个类可能会实现多个接口，所以是2+n个字节
	* Fields
		
		> 成员变量,2+n个字节
	* Method
		
		> 方法,2+n个字节
	* Attributes
		> 属性，2+n个字节
		

![字节码结构](/content/image/leijiegou.PNG)

![字节码结构1](/content/image/leijiegou1.PNG)

### volatile为什么不能实现线程安全

[为什么volatile不能保证线程安全](https://blog.csdn.net/qq_33330687/article/details/80990729)

[jvm调优](https://blog.csdn.net/wuzhilon88/article/details/49201891)

### JVM相关的比较权威的人

* R大

### 参考资料

* [Java8官方文档](https://docs.oracle.com/javase/8/javase-books.htm)

