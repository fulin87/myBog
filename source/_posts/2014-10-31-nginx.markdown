---
layout: post
title:	"Nginx知识点汇总"
date:	2014-10-31 13:07:11 +0800
categories:	linux
---


> nginx的使用越来越广泛，在工作中也有接触，把与其相关的知识点记录一下，免得遗忘了

## nginx介绍

 **[nginx](http://nginx.org/)** 是由一位叫Igor Sysoev的俄罗斯人开发的www软件，是一个高性能的http和反向代理服务器

## nginx的主要功能

 * web服务
 * 反向代理
 * web缓存

### nginx的优点

 * 高并发（静态小文件），1-2W的并发
 * 占用资源少，2W并发，10个线程，占用150M内存
 * 功能种类比较多，每一个功能都不是特别强
 * 支持epoll模型，使的nginx可以支持高并发
 * 利用nginx可以对ip限速，可以限制连接数
 * 配置简单，更灵活

 原理见下图（和apache做对比）

 ![](/image/nginx01.PNG)

### nginx的适用场景

 * 静态服务器（图片，视频服务，html,js,css,flv）
 * 动态服务，nginx + fastcgi
 * 反向代理，负载均衡，日PV2000W以下，都可以直接使用nginx做负载均衡
 * 缓存服务
 
## nginx的安装

 * 先更换`yum`源，更改成阿里的`yum`源
	
		# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo

 * 安装pcre这个软件

	PCRE(Perl Compatible Regular Expressions)是一个Perl库，可以兼容正则表达式，nginx的一些功能依赖这个。

		# yum install pcre pcre-devel -y

 * 安装openssl这个软件

	nginx如果要支持https需要这个软件的支持，所以需要安装

		# yum install openssl openssl-devel -y

 * 下载nginx，尽量选择一年一前的稳定版本
	
		# cd /home/fulin/tools
		# wget http://nginx.org/download/nginx-1.11.5.tar.gz

 * 创建一个用户来运行nginx，不能登录，没有家目录

		# useradd nginx -s /sbin/nologin -M

 * 安装c，c++编译器

		# yum -y install make gcc gcc-c++ ncurses-devel

 * 安装nginx
		
	*解压*

		# tar xf nginx-1.11.5.tar.gz
	
	*进入目录*
		
		# cd nginx-1.11.5
	
	*安装前检测*
		
		# ./configure --user=nginx --group=nginx --prefix=/application/nginx1.11.5 --with-http_stub_status_module --with-http_ssl_module

	*查看是否检测通过，0为通过*

		# echo $?
	
	*编译安装*

		# make
		# make install

	*做一个软链接，作用是去掉版本号*

		# ln -s /application/nginx1.11.5/ /application/nginx
		# cd /application/nginx/

## 使用nginx

 * 启动

		# /application/nginx/sbin/nginx

 * 检查语法，也就是检查配置文件的语法

		# /application/nginx/sbin/nginx -t

 * 重启

		# /application/nginx/sbin/nginx -s reload

 * 停止nginx服务

		# /application/nginx/sbin/nginx -s stop
 
 * 访问

		http://192.168.116.131:80

 * 排错

	看网络通不通

		ping 192.168.116.131

	端口通不通

		telnet 192.168.116.131 80

	查看nginx的错误日志

		/application/nginx/log/error.log

 * nginx的目录结构

		├── client_body_temp    #客户端临时文件
		├── conf				#nginx配置文件
		│   ├── fastcgi.conf
		│   ├── fastcgi.conf.default
		│   ├── fastcgi_params
		│   ├── fastcgi_params.default
		│   ├── koi-utf
		│   ├── koi-win
		│   ├── mime.types
		│   ├── mime.types.default
		│   ├── nginx.conf		#默认的配置文件
		│   ├── nginx.conf.default #默认配置文件的备份文件
		│   ├── scgi_params
		│   ├── scgi_params.default
		│   ├── uwsgi_params
		│   ├── uwsgi_params.default
		│   └── win-utf
		├── fastcgi_temp	#临时目录
		├── html			#默认站点目录
		│   ├── 50x.html	#错误页面
		│   └── index.html	#默认首页
		├── logs			#默认日志目录
		│   ├── access.log	#nginx的访问日志，可以通过此文件查看用户访问情况
		│   ├── error.log	#nginx的错误日志
		│   └── nginx.pid	#nginx启动后会把所有的进程ID号写入此文件
		├── proxy_temp		
		├── sbin			#nginx命令的目录，比如nginx的启动命令：nginx
		│   └── nginx
		├── scgi_temp		#临时目录
		└── uwsgi_temp		#临时目录

 * nginx的配置文件,nginx.conf
 
		默认用户
		#user  nobody;    
		子进程的个数，一般与cpu的核数相当
		worker_processes  1;  
		
		错误日志，错误日志基本的级别从低往高：debug,info,notice,error
		#error_log  logs/error.log;
		#error_log  logs/error.log  notice;
		#error_log  logs/error.log  info;
		
		nginx的进程号
		#pid        logs/nginx.pid;
		
		nginx处理的最大连接数量
		events {
		    worker_connections  1024;
		}
		
		http {
		    include       mime.types;
		    default_type  application/octet-stream;
		
			记录的访问日志的格式
		    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		    #                  '$status $body_bytes_sent "$http_referer" '
		    #                  '"$http_user_agent" "$http_x_forwarded_for"';
		
			记录访问日志
		    #access_log  logs/access.log  main;
		
		    sendfile        on;
		    #tcp_nopush     on;
		
		    #keepalive_timeout  0;
		    keepalive_timeout  65;
		
		    #gzip  on;
		
			虚拟主机
		    server {
				监听的端口好
		        listen       80;
				域名
		        server_name  localhost;
		
		        #charset koi8-r;
				访问日志
		        #access_log  logs/host.access.log  main;
		
				根据前面的结果执行后面的任务，就是执行RUI跳转的
		        location / {
		            root   html;
		            index  index.html index.htm;
		        }
				错误页面
		        error_page   500 502 503 504  /50x.html;
		        location = /50x.html {
		            root   html;
		        }
		    }
		}

 * 用nginx实现简单的负载均衡

	`upstream` 是nginx的一个模块，可以实现负载均衡的功能，也就是反向代理。   
	`upstream` backend标签中的server代表一个目标服务器。    
	`max_fails` 是最多请求失效次数时将节点去除    
	`fail_timeout` 是请求超时时间

		upstream backend{
	     server 10.202.33.86:8080 max_fails=3 fail_timeout=30s;
	     server 10.202.33.87:8080 max_fails=3 fail_timeout=30s;
	    }
	
	    server {
	        listen       80;
	        server_name  www.etiantian.org;
	        location / {
	            proxy_pass http://backend;
	        }
	    }
