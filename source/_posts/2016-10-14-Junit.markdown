---
layout: post
title:  "系统学习Junit4"
date:	2016-10-14 13:07:11 +0800
categories: java
---


> 减少程序中的bug的一个有效的方法是编写程序逻辑的同时进行单元测试，尽早发现问题。同时Junit作为开源类库， **[受欢迎程度](http://www.oschina.net/news/73667/2016-top-100-java-library)** 是非常高的，已经成为java单元测试事实上的标准，有必要做深入的学习。

## Junit的官方信息

 * **[Junit官网](http://junit.org/junit4/)**
 * **[github地址](https://github.com/junit-team/junit4)**

## 学习笔记

### 最佳实践

 * 源代码和测试代码要分开放在不同的目录，不能混在一起
 * 测试类和目标类最好在同一个包下面,这样可以包的导入，因为他们的class文件位于同一个包下
 * 要明白单元测试不能保证代码正确，只能说明代码没有明显的错误，这个要看测试用例的选择
 * 单元测试是检测程序的输入数据和输出数据（异常）是否符合预期
 * 测试用例与测试用例之间应该绝对独立不能有任何依赖关系

### junit使用规范

 * 测试类必须直接或间接继承TestCase,以下是TestCase的javaDoc
 
	 > A test case defines the fixture to run multiple tests. To define a test case
	 * 1) implement a subclass of TestCase
	 * 2) define instance variables that store the state of the fixture
	 * 3) initialize the fixture state by overriding setUp
	 * 4) clean-up after a test by overriding tearDown.
	 * Each test runs in its own fixture so there can be no side effects among test runs

 * 测试目标类的私有方法可以采用反射的方式来测试
 * Eclipse为我们提供了工具可以一键生成测试类，可大幅度提高编写测试用例的效率
 * Junit中有测试套件:testSuite，可以将多个测试用例组合成一个运行
 * junit4开始全面支持注解，junit4并不要求测试类继承TestCase



### 准备测试类

`TestCast1`,`TestCast2` 

	package com.fulin.test.testJunt;
	import org.junit.After;
	import org.junit.AfterClass;
	import org.junit.Before;
	import org.junit.BeforeClass;
	import org.junit.Test;
	
	public class TestCast1{
		
		public TestCast1(){
			System.out.println("Constrctor...");
		}
		
		//junit4中的@Before注解实现的功能与junit3中的setUp方法实现的功能相同
		@Before
		public void before(){
			System.out.println("before");
		}
		
		//@BeforeClass注解在所有测试方法执行之前执行，仅执行一次，可以用来做一些初始化工作
		@BeforeClass
		public static void beforeClass(){
			System.out.println("beforeClass");
		}
		
		//junit4中的@After注解实现的功能与junit3中的tearDown方法实现的功能相同
		@After
		public void after(){
			System.out.println("after");
		}
		
		//@AfterClass注解在所有测试方法执行之后执行，仅执行一次，可以用来做一些收尾工作
		@AfterClass
		public static void afterClass(){
			System.out.println("afterClass");
		}
		
		@Test
		public void test1(){
			System.out.println("test1");
		}
		
		@Test
		public void test2(){
			System.out.println("test2");
		}
	}

---

	package com.fulin.test.testJunt;

	import org.junit.Test;
	
	public class TestCast2 {
		@Test
		public void test3(){
			System.out.println("test3");
		}
	}

 编写好测试类之后，就可以使用Junit4来运行测试类了。运行测试类的方法有两种：

### 测试方法一
 
使用Junit原生的JUnitCore.runClasses(Class...class)方法,如下所示

	package com.fulin.test.testJunt;

	import org.junit.runner.JUnitCore;
	import org.junit.runner.Result;
	import org.junit.runner.notification.Failure;
	
	public class JunnerTest {
	
		public static void main(String[] args) {
			Result result = JUnitCore.runClasses(TestCast1.class,TestCast2.class);
			for (Failure fail : result.getFailures()) {
				System.out.println(fail.toString());
			}
			
			if(result.wasSuccessful()){
				System.out.println("All tests finished successfully...");
			}
		}
		
	}

输出如下：

	beforeClass
	Constrctor...
	before
	test1
	after
	Constrctor...
	before
	test2
	after
	afterClass
	test3
	All tests finished successfully...
 
### 测试方法二

 使用eclipse这个IDE自带的测试工具，在测试类中 `右键-> run as -> Junit Test` 也可以得到相同的结果

### 测试过程和结果解读

#### Junit4的生命周期

 Junit4提供了一系列的注解，给编写测试测试类提供了极大的便利，也减少了侵入性。在不同的方法和字段上使用不同的注解，会有不同的效果。但是正真的测试核心方法还是 `@Test` 标注的方法，其他都是围绕这个核心展开的，相当于其生命周期的一部分。

 同时，我们发现，不过是用那种测试方法，最终的结果都一样，我们有理由相信，Junit4的测试入口就是JunitCore.runClasses。这也是接下来分析源码的入口。

#### Junit注解解释

	1. @Test :   测试方法，测试程序会运行的方法
                 后边可以跟参数代表不同的测试如
                 (expected=XXException.class) 异常测试
                 (timeout=xxx)超时测试
	2. @Ignore : 被忽略的测试方法
	3. @Before : 每一个测试方法之前运行
	4. @After :  每一个测试方法之后运行
	5. @BeforeClass: 所有测试开始之前运行
	6. @AfterClass:  所有测试结束之后运行

### Junit源码解析
 
 这是根据Junit源码画出的时序图

 ![](/content/image/Junit-time.png)

 
## 网友的精彩博客

 * **[Junit学习系列一](https://my.oschina.net/pangyangyang/blog/144495)**
 * **[Junit学习系列二](https://my.oschina.net/pangyangyang/blog/146015)**
 * **[Junit学习系列三](https://my.oschina.net/pangyangyang/blog/153320)**
