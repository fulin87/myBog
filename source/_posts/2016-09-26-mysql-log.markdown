---
layout: post
title:  "mysql的数据备份和恢复"
date:   2016-09-26 13:47:11 +0800
categories: 存储
---


> 数据库的备份和恢复是每个DBA必须掌握的技能。作为开发人员来说，适当的了解，也是有必要的。曾经我就遇到过一个面试官问过我：是否会进行数据库备份和恢复，什么是热备份，什么是冷备份。当然，我不能说这是DBA的工作，只能怪自己学的不够广。当学会了数据库的备份和恢复，再次使用数据库的时候，视野就更开阔了。

### mysql的二进制日志

 说起mysql的备份和恢复，就必须说mysql的二进制日志，它记录的是所有mysql数据库发生变更的信息，因此对数据库非常重要

 * 主要作用有以下几个方面

	 - 可以用于数据库基于时间点的还原
	 - 可以用来分析数据库发生变更的情况，比如程序程序bug导致数据库数据更改等。
	 - 二进制日志还可以用来重建数据库

 * 二进制日志功能配置

	 - 开启bin_log日志功能,在my.cnf中修改，在[mysqld]下增加:
		 			
			log-bin=/tmp/mysql-log
			binlog_format=mixed

 * 查看二进制日志功能是否开启

		mysql> show variables like '%log_bin%';
		+---------------------------------+----------------------+
		| Variable_name                   | Value                |
		+---------------------------------+----------------------+
		| log_bin                         | ON                   |
		| log_bin_basename                | /tmp/mysql-log       |
		| log_bin_index                   | /tmp/mysql-log.index |
		| log_bin_trust_function_creators | OFF                  |
		| log_bin_use_v1_row_events       | OFF                  |
		| sql_log_bin                     | ON                   |
		+---------------------------------+----------------------+
		6 rows in set

 * 查看二进制文件的情况

		mysql> show master logs;
		+------------------+-----------+
		| Log_name         | File_size |
		+------------------+-----------+
		| mysql-log.000001 |       143 |
		| mysql-log.000002 |       562 |
		+------------------+-----------+
		2 rows in set

	或者

		mysql> show binary logs;
		+------------------+-----------+
		| Log_name         | File_size |
		+------------------+-----------+
		| mysql-log.000001 |       143 |
		| mysql-log.000002 |       562 |
		+------------------+-----------+
		2 rows in set

 * 切换二进制文件

		mysql> flush logs;
		Query OK, 0 rows affected

		mysql> show binary logs;
		+------------------+-----------+
		| Log_name         | File_size |
		+------------------+-----------+
		| mysql-log.000001 |       143 |
		| mysql-log.000002 |       609 |
		| mysql-log.000003 |       120 |
		+------------------+-----------+
		3 rows in set

 * 删除或者初始化二进制文件

		mysql> reset master;
		Query OK, 0 rows affected
		
		mysql> show binary logs;
		+------------------+-----------+
		| Log_name         | File_size |
		+------------------+-----------+
		| mysql-log.000001 |       120 |
		+------------------+-----------+
		1 row in set

 * 指定二进制日志失效期

		mysql> show variables like "%expire%";
		+--------------------------------+-------+
		| Variable_name                  | Value |
		+--------------------------------+-------+
		| disconnect_on_expired_password | ON    |
		| expire_logs_days               | 0     |
		+--------------------------------+-------+
		2 rows in set

		mysql> set global  expire_logs_days=5;
		Query OK, 0 rows affected
		
		mysql> show variables like "%expire%";
		+--------------------------------+-------+
		| Variable_name                  | Value |
		+--------------------------------+-------+
		| disconnect_on_expired_password | ON    |
		| expire_logs_days               | 5     |
		+--------------------------------+-------+
		2 rows in set

 * 二进制日志的格式的查看和格式介绍,这里仅做了解,有三种
	
		mysql> show variables like '%format%';
		+--------------------------+-------------------+
		| Variable_name            | Value             |
		+--------------------------+-------------------+
		| binlog_format            | MIXED             |
		| date_format              | %Y-%m-%d          |
		| datetime_format          | %Y-%m-%d %H:%i:%s |
		| default_week_format      | 0                 |
		| innodb_file_format       | Antelope          |
		| innodb_file_format_check | ON                |
		| innodb_file_format_max   | Antelope          |
		| time_format              | %H:%i:%s          |
		+--------------------------+-------------------+
		8 rows in set

		Row : 日志中会记录成每一行数据被修改的形式，然后在 slave 端再对相同的数据进行修改
		Statement ： 每一条会修改数据的 SQL 都会记录到 master 的 bin-log 中。slave 在复制的时候 SQL 进程会解析成和原来 master 端执行过的相同的 SQL 再次执行。
		Mixed : MySQL 会根据执行的每一条具体的 SQL 语句来区分对待记录的日志形式，也就是在 statement 和 row 之间选择一种,相当于前两种的混合。

 * 查看二进制日志文件的内容

		# mysqlbinlog mysql-log.00000

		SET TIMESTAMP=1474882546/*!*/;
		insert into t select * from t
		/*!*/;
		# at 739
		#160926  2:35:46 server id 1  end_log_pos 770 CRC32 0x45bf6de6 	Xid = 98
		COMMIT/*!*/;
		# at 770
		#160926  2:35:47 server id 1  end_log_pos 849 CRC32 0xdcad682e 	Query	thread_id=1	exec_time=0	error_code=0
		SET TIMESTAMP=1474882547/*!*/;
		BEGIN
		/*!*/;
		# at 849
		#160926  2:35:47 server id 1  end_log_pos 952 CRC32 0x596b7cf9 	Query	thread_id=1	exec_time=0	error_code=0

	仔细观察会发现，这里记录了数据库的每一次查询和修改过程，就像数据库的变更记录一样，难怪可以用来恢复数据。