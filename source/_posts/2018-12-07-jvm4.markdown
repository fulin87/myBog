---
layout: post
title:  "老鸟眼中的JVM知识体系(4)-垃圾收集器与内存分配回收策略"
date:	2018-12-06 19:07:11 +0800
categories: java
---

> 定位了内存中的垃圾之后，具体的垃圾收集是垃圾收集器进行的，垃圾收集器是垃圾收集算法的具体实现，JVM规范没有对垃圾收集器进行强制的规范，垃圾收集器的种类很多，不同的垃圾收集器在不同的业务场景下性能表现不一样，选择垃圾收集器的目的就是为了提升垃圾收集的效率



## 垃圾收集器

*下图展示了不同分代的收集器，以及收集器之间的配合关系*

![](E:\code\myBog\source\image\JVM4.PNG)



### Serial 收集器

* 使用复制算法
* 新生代收集器，GC时会造成Stop The World

* 最基本，历史最悠久的收集器
* 单线程的垃圾收集器
* 会明显造成线程的卡顿，影响用户体验
* Serial收集器不适合使用在服务端，但是可以适当的使用在内存分配小的客户端服务中
* 之所以会用在客户端（比如桌面应用）中，是因为桌面应用的JVM内存比较小停顿感小，单线程的效率还是比较高的



### ParNew 收集器

* 使用复制算法
* 新生代收集器，GC时会造成Stop The World

* 多线程的垃圾收集器
* 在服务端因为是多线程可以显著的降低停顿感



### Parallel Scavenge 收集器

* 使用复制算法
* 新生代收集器
* 多线程收集器，GC时会造成Stop The World
* 设计的目标是达到一个可控制的吞吐量

* > 吞吐量：CPU用于运行用户代码的时间与GC消耗的总时间的比值
  >
  > 吞吐量公式：（执行用户代码的时间） /  (执行用户代码的时间 + 执行垃圾回收的时间）

* > -XX:MaxGCPauseMillis 垃圾收集最大停顿时间
  >
  > -XX:GCTimeRatio 吞吐量大小（0，100）之间的值，默认是99



## 内存分配与回收策略

* 对象优先在



### 参考资料

《深入理解JAVA虚拟机》 周志明

 