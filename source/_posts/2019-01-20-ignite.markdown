---
layout: post
title:  "ignite实战总结"
date:	2019-01-20 13:07:11 +0800
categories: 中间件
---

> 最近所负责的项目使用了ignite，系统的性能提升了3倍，这里记录一下ignite使用过程中的一些知识点

### 为什么要使用ignite

 首先，为什么要使用ignite呢？我们公司主要是为了解决redis存在的高可用问题而引入了ignite。在使用的过程中发现，ignite不仅有优秀的缓存特性，还有其他异常强大的功能，刚好能解决平时系统遇到的一些棘手的问题

* ignite的数据网格。可以实现redis的功能，同时ignite的内存固化以及数据的分片和备份机制可以实现数据的安全
* ignite的计算网格和分布式线程池。可以实现"减少数据传输，发布计算任务"的模式来最大限度的发挥集群的计算能力
* ignite的消息机制。可以实现发布订阅。
* ignite的分布式数据结构。比如阻塞队列

以上是我亲自使用过的ignite特性

### ignite和redis有什么区别

 根据我自己的亲自使用，发现ignite和redis的区别主要体现在下面这几反面：

 * ignite可以和应用节点集成在一起，使用相同的jvm进程，所以在分布式环境下，不用担心ignite节点宕机的问题，这一点redis不具备。
 * ignite的节点间内存资源共享，数据持久化具有分片和备份机制（非常类似kafka的机制），所以ignite可以非常容易的进行横向扩展
 * ignite的计算网格计算体现一个一个核心思想：**尽量减少数据的移动，而是将计算任务发布出去然后汇总结果**,这和MapReduce非常类似

### ignite使用过程中遇到的问题

 * ignite集群的发现。ignite默认使用的是组播，可以自动发现相同网段内的节点，这一点非常不友好。在开发的过程中我们通过查看源代码才解决了怎样基于静态IP的方式来发现集群。至于使用zookeeper来发现集群，目前还没有尝试
 * ignite的分布式锁和数据网格的事务之间似乎有某种联系，我们在使用的过程中引发了一个数据库死锁的问题，原因没有找到，最终将ignite分布式锁更改为redis分布式锁问题得以解决，这个问题需要深入的研究。

### ignite学习资源

* [官方文档](<https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+Home>)

* [相关文档](<https://apacheignite.readme.io/docs>)