---
layout: post
title:  "老鸟眼中的JVM知识体系(4)-字节码"
date:	2018-12-08 19:07:11 +0800
categories: java
---

> 一直想对java的字节码相关的知识用自己的语言进行一下总结，坦率的说，学习java字节码并不能带来直接的效益，这应该算是一种 ”内功“。
>
> 这里要感谢 **圣思园** 的 **张龙** 老师。我在youtube上发现了他讲解java字节码的视频教程，张龙老师讲的非常好，就像他所说的，他是*一个字节一个字节* 讲解的，通过他的讲解，让我对java字节码有了全新的认识。



### 反编译

* javap -c ren.colorful.bytecode.MyTest1

* javap -verbose ren.colorful.bytecode.MyTest1

  > javap -verbose 命令将会分析该字节码文件的 
  >
  > *魔数，版本号，常量池，类信息，类的构造方法，类中的方法信息，类变量，成员变量等信息*
  >
  > 换句话说就是 javap -verbose 命令将会把字节码文件完全拆解开然后呈现在用户面前

java源文件

```java
package ren.colorful.bytecode;

public class MyTest1 {
	private int a = 1;
	
	public MyTest1() {
		
	}

	public int getA() {
		return a;
	}

	public void setA(int a) {
		this.a = a;
	}
}
```

class文件用javap解析

```xml
D:\code\thinkinjava\target\classes>javap -verbose ren.colorful.bytecode.MyTest1
Classfile /D:/code/thinkinjava/target/classes/ren/colorful/bytecode/MyTest1.class
  Last modified 2018-12-8; size 493 bytes
  MD5 checksum 589e6259365c07d64d989e466697b20e
  Compiled from "MyTest1.java"
public class ren.colorful.bytecode.MyTest1
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Class              #2             // ren/colorful/bytecode/MyTest1
   #2 = Utf8               ren/colorful/bytecode/MyTest1
   #3 = Class              #4             // java/lang/Object
   #4 = Utf8               java/lang/Object
   #5 = Utf8               a
   #6 = Utf8               I
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Methodref          #3.#11         // java/lang/Object."<init>":()V
  #11 = NameAndType        #7:#8          // "<init>":()V
  #12 = Fieldref           #1.#13         // ren/colorful/bytecode/MyTest1.a:I
  #13 = NameAndType        #5:#6          // a:I
  #14 = Utf8               LineNumberTable
  #15 = Utf8               LocalVariableTable
  #16 = Utf8               this
  #17 = Utf8               Lren/colorful/bytecode/MyTest1;
  #18 = Utf8               getA
  #19 = Utf8               ()I
  #20 = Utf8               setA
  #21 = Utf8               (I)V
  #22 = Utf8               SourceFile
  #23 = Utf8               MyTest1.java
{
  public ren.colorful.bytecode.MyTest1();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #10                 // Method java/lang/Object."<init>":()V
         4: aload_0
         5: iconst_1
         6: putfield      #12                 // Field a:I
         9: return
      LineNumberTable:
        line 6: 0
        line 4: 4
        line 8: 9
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lren/colorful/bytecode/MyTest1;

  public int getA();
    descriptor: ()I
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #12                 // Field a:I
         4: ireturn
      LineNumberTable:
        line 11: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lren/colorful/bytecode/MyTest1;

  public void setA(int);
    descriptor: (I)V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: putfield      #12                 // Field a:I
         5: return
      LineNumberTable:
        line 15: 0
        line 16: 5
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lren/colorful/bytecode/MyTest1;
            0       6     1     a   I
}
SourceFile: "MyTest1.java"
```

class文件的16进制显示

![](D:\code\myBog\source\image\JVM6.PNG)





### 魔数

所有的合法的 **.class** 字节码文件的前4个字节都是魔数，魔数的值是固定值：0xCAFEBABE



### 版本号

魔数之后的4个字节是版本信息，分别是次版本号 minor version: 0 和主版本号 major version: 52

> 主版本号52代表1.8；主版本51代表1.7，以此类推
>
> java高版本的JVM可以加载运行低版本的class字节码，反之则不行



### 常量池(constant pool)

紧接着主版本号之后的就是常量池的入口。一个java 类中定义的很多信息都是由常量池来维护和描述的。

可以将常量池看做是class文件的 *资源仓库* ，比如java类中定义的方法和变量信息，都是存储在常量池中。常量池中主要存储两类常量：**字面量 和 符号引用** 。常量池在整个字节码中占有相当大的 *篇幅*

* 字面量：文本字符串，java中声明为final的常量值等
* 符号引用：类和接口的全局限定名，字段的名称和描述符，方法的名称和描述符

#### 常量池的总体结构

java类所对应的常量池主要由**常量池数量** 和 **常量池数组（常量表）** 这两部分构成。常量池数量紧跟在主版本号后面，占据2个字节；常量池数组则紧跟在常量池数量之后。常量池数组与一般的数组不同的是，常量池数组中不同的元素的类型，结构都是不同的，长度当然也就不同；但是，每一个元素的第一个数据都是一个 **u1** 类型，该字节是个标志位，占据1个字节。JVM在解析常量池时，会根据这个 u1 类型来获取元素的具体类型。值得注意的是，常量池数组中元素的个数 = 常量池数 - 1（其中0暂时不使用），目的是满足某些常量池索引值得数据在特定情况下需要表达（不引用任何一个常量池）的含义；根本原因在于，索引为0也是一个常量（保留常量），值不过它不位于常量表中，这个常量就对应null值；所以常量池的索引从1而非0开始。

![](D:\code\myBog\source\image\JVM5.PNG)



















### 参考资料

youtube上圣思园 张龙的视频

《深入理解java虚拟机》